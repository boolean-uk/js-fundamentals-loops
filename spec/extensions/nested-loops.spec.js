const answers = require('../../src/extensions/nested-loops.js')

const a1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
const a2 = [
  [1],
  [2, 2],
  [3, 3, 3],
  [4, 4, 4, 4],
  [5, 5, 5, 5, 5],
  [6, 6, 6, 6, 6, 6],
  [7, 7, 7, 7, 7, 7, 7],
  [8, 8, 8, 8, 8, 8, 8, 8],
  [9, 9, 9, 9, 9, 9, 9, 9, 9],
  [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
]
const a3 = [
  [1],
  [2, 1],
  [3, 2, 1],
  [4, 3, 2, 1],
  [5, 4, 3, 2, 1],
  [6, 5, 4, 3, 2, 1],
  [7, 6, 5, 4, 3, 2, 1],
  [8, 7, 6, 5, 4, 3, 2, 1],
  [9, 8, 7, 6, 5, 4, 3, 2, 1],
  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
]
const a4 = [
  [[1]],
  [[2], [2, 2]],
  [[3], [3, 3], [3, 3, 3]],
  [[4], [4, 4], [4, 4, 4], [4, 4, 4, 4]],
  [[5], [5, 5], [5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5, 5]],
  [[6], [6, 6], [6, 6, 6], [6, 6, 6, 6], [6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6]],
  [
    [7],
    [7, 7],
    [7, 7, 7],
    [7, 7, 7, 7],
    [7, 7, 7, 7, 7],
    [7, 7, 7, 7, 7, 7],
    [7, 7, 7, 7, 7, 7, 7]
  ],
  [
    [8],
    [8, 8],
    [8, 8, 8],
    [8, 8, 8, 8],
    [8, 8, 8, 8, 8],
    [8, 8, 8, 8, 8, 8],
    [8, 8, 8, 8, 8, 8, 8],
    [8, 8, 8, 8, 8, 8, 8, 8]
  ],
  [
    [9],
    [9, 9],
    [9, 9, 9],
    [9, 9, 9, 9],
    [9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9]
  ],
  [
    [10],
    [10, 10],
    [10, 10, 10],
    [10, 10, 10, 10],
    [10, 10, 10, 10, 10],
    [10, 10, 10, 10, 10, 10],
    [10, 10, 10, 10, 10, 10, 10],
    [10, 10, 10, 10, 10, 10, 10, 10],
    [10, 10, 10, 10, 10, 10, 10, 10, 10],
    [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
  ]
]

const a5 = [
  [[1]],
  [[1], [1, 2]],
  [[1], [1, 2], [1, 2, 3]],
  [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]],
  [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]],
  [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]],
  [
    [1],
    [1, 2],
    [1, 2, 3],
    [1, 2, 3, 4],
    [1, 2, 3, 4, 5],
    [1, 2, 3, 4, 5, 6],
    [1, 2, 3, 4, 5, 6, 7]
  ],
  [
    [1],
    [1, 2],
    [1, 2, 3],
    [1, 2, 3, 4],
    [1, 2, 3, 4, 5],
    [1, 2, 3, 4, 5, 6],
    [1, 2, 3, 4, 5, 6, 7],
    [1, 2, 3, 4, 5, 6, 7, 8]
  ],
  [
    [1],
    [1, 2],
    [1, 2, 3],
    [1, 2, 3, 4],
    [1, 2, 3, 4, 5],
    [1, 2, 3, 4, 5, 6],
    [1, 2, 3, 4, 5, 6, 7],
    [1, 2, 3, 4, 5, 6, 7, 8],
    [1, 2, 3, 4, 5, 6, 7, 8, 9]
  ],
  [
    [1],
    [1, 2],
    [1, 2, 3],
    [1, 2, 3, 4],
    [1, 2, 3, 4, 5],
    [1, 2, 3, 4, 5, 6],
    [1, 2, 3, 4, 5, 6, 7],
    [1, 2, 3, 4, 5, 6, 7, 8],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  ]
]

const a6 = [
  [[1]],
  [[1], [2.5]],
  [[1], [2.5], [4.666666666666667]],
  [[1], [2.5], [4.666666666666667], [7.5]],
  [[1], [2.5], [4.666666666666667], [7.5], [11]],
  [[1], [2.5], [4.666666666666667], [7.5], [11], [15.166666666666666]],
  [[1], [2.5], [4.666666666666667], [7.5], [11], [15.166666666666666], [20]],
  [
    [1],
    [2.5],
    [4.666666666666667],
    [7.5],
    [11],
    [15.166666666666666],
    [20],
    [25.5]
  ],
  [
    [1],
    [2.5],
    [4.666666666666667],
    [7.5],
    [11],
    [15.166666666666666],
    [20],
    [25.5],
    [31.666666666666668]
  ],
  [
    [1],
    [2.5],
    [4.666666666666667],
    [7.5],
    [11],
    [15.166666666666666],
    [20],
    [25.5],
    [31.666666666666668],
    [38.5]
  ]
]

describe('Nested loops', () => {
  it('Simple array', () => {
    expect(answers.simpleOne).toEqual(a1)
  })

  it('Nested array 1.', () => {
    expect(answers.nestedOne).toEqual(a2)
  })

  it('Nested array 2.', () => {
    expect(answers.nestedTwo).toEqual(a3)
  })

  it('Deep array 1.', () => {
    expect(answers.deepOne).toEqual(a4)
  })

  it('Deep array 2.', () => {
    expect(answers.deepTwo).toEqual(a5)
  })

  fit('Deep array 3.', () => {
    expect(answers.deepThree).toEqual(a6)
  })
})
